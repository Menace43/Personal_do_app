
#Author: Adeyemo Joel
#Description:  Design a personal todo list app that can not be tracked by  google or even apple and easy to use
 # App inspiration is  gotten from Apple's Calendar, Google Task anad Any.do
#File:Application.py
#Date:8/23/2022

__version__='1.1.0'

#Front_end Dependencies
import calendar
from tkinter import END, INSERT, PhotoImage
import customtkinter
from PIL import  Image,ImageTk
import PIL.Image
import tkinter as tk
import queue,datetime
from tkinter import messagebox

#Back-end Dependencies
import os
from typing import Optional, Tuple


PATH = os.path.dirname(os.path.realpath(__file__))
image_path= os.path.join(PATH,"Icons")

class App(customtkinter.CTk):
    HEIGHT= 900
    WIDTH= 1200
    Left_frame_width=50
    def __init__(self, *args, fg_color="default_theme", **kwargs):
        super().__init__() 
        
        # Customize the Layout
        self.title("To do List App")
        self.geometry(f'{App.WIDTH}x{App.HEIGHT}')
        self.protocol("WM_DELETE_WINDOW",self.on_closing)
        
        # Load images
        self.enter_icon= self.load_image(light_path=image_path+'/Send-30.png',image_size=(30,30))                  # [1] in links.txt
        self.calendar_icon=self.load_image(light_path=image_path+"/calendar-30.png",image_size=(30,30))            # [2] in links.txt
        self.details_icon=self.load_image(light_path=image_path+"/details-30.png",image_size=(30,30))              # [3] in links.txt
        self.star_icon=self.load_image(light_path=image_path+"/star-30.png",image_size=(30,30))                    # [4] in links.txt
                                     
        
        
        # Create a queue
        self.que=queue.Queue()
        
        #Design the App GUI 
        self.create_app()
    #-------------------------------------------------------------------------
    def on_closing(self,events=0):
        '''When the Window is closed'''
        print("destroyed")
        self.destroy()
    #----------------------------------------------------------------------------
    def change_apperance_mode(self,selected):
        ''' # Change the apperance of the  App ie either Dark mode or light mode'''
        customtkinter.set_appearance_mode(selected)
    #-----------------------------------------------------------------------------
    def load_image(self,light_path:Optional[str] = None,dark_path:Optional[str] = None, image_size: Tuple[int, int]=(0,0)):
        light_image = Image.open(light_path) if light_path else None
        dark_image = Image.open(dark_path) if dark_path else None
        return customtkinter.CTkImage(light_image=light_image,dark_image=dark_image,size=image_size)
    #----------------------------------------------------------------------------
    def add_to_commandbox(self):
        ''' # Add what Ever is in the queue to the command box'''
        inside= []            # List that holds the current values
        lz_que=queue.Queue()   # Create a new Queue
        
        # Put the current task into a new queue
        for i_x in self.que.queue:
            lz_que.put(i_x)
        
        #Print the Queue  on the Combo box
        for i_y in range(0,len(lz_que.queue)):
            inside.append(lz_que.get()) 
                                
        self.commandbox.delete("0",END)                                                                                                                                                                                                                                                                
        #Add to the Command box
        for x in range(0,len(inside)):
            instr=f'{x}:{inside[x]}'+'\n'
            self.commandbox.insert(x,instr)
            #self.commandbox.tag_add("here","1.0",END)
        return
    #--------------------------------------------------------------------------------------    
    def savebtn_clicked(self,choice):
        text_entered=self.task_entry.get()
        #self.scrollable_checkbox_frame.add_item(text_entered)
        self.scrollable_checkbox_frame.add_item(text_entered)
        self.task_entry.delete("0",'end')
    #---------------------------------------------------------------------------------------- 
    def detailbtnclicked(self):
        ''' Add more details to the current task'''
    #---------------------------------------------------------------------------------------- 
    def calendarbtn_clicked(self):
        # Create a Toplevel
        self.new_root=customtkinter.CTkToplevel(self)
        self.new_root.title("Set Time and date")
        self.new_root.geometry(f'500x 200')
        self.new_root.protocol("WM_DELETE_WINDOW",self.on_closing)
        
        self.create_toplevel()
    #----------------------------------------------------------------------------------------  
    def starbtn_clicked(self):
        pass
    #----------------------------------------------------------------------------------------    
    def create_toplevel(self):
        #Create the Frame
        self.superframe=customtkinter.CTkFrame(self.new_root,corner_radius=0)
        self.superframe.grid(column=0,row=0,sticky='nsew')
        
        # Configure the frame
        #configure grid layout (1x11) 1 column 11 rows
        self.superframe.grid_rowconfigure(0,minsize=10)   # empty row with minsize as spacing
        self.superframe.grid_rowconfigure(5,weight=1)
        self.superframe.grid_rowconfigure(8,minsize=20)
        self.superframe.grid_rowconfigure(11,minsize=10)
        
        # self.trainglebtn=customtkinter.CTkButton(self.superframe,fg_color="gray40",corner_radius=10,text="",width=20,image=self.threedot_icon)
        # self.trainglebtn.grid(column=0,row=0,pady=10,padx=10,sticky='w')
        
        # # Add a Calendar button 
        # self.calendarbtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=10,text="",width=40,image= self.calendar_icon,command=self.calendarbtn_clicked)
        # self.calendarbtn.grid(column=1,row=0,pady=10,padx=10,sticky='w')
    #----------------------------------------------------------------------------------------  
    def Calendar_btn_clicked(self):
        datetime=calendar.calendar(2022)
        print(datetime)
    #----------------------------------------------------------------------------------------     
    def checkbox_frame_event(self,choice):
        print(f"checkbox frame modified: {self.scrollable_checkbox_frame.get_checked_items()}")
        self.scrollable_checkbox_frame.remove_item(choice)
    #-----------------------------------------------------------------------------------------   
    def create_app(self):
        #Implement Two frame system
        # Configure grid layout [2x1] ie 2 columns [0,1] and  1 row[0]
        self.grid_columnconfigure(1,weight=1)
        self.grid_rowconfigure(0,weight=1)
        
        #===========Creating the Two Frames==============================
        self.left_frame=customtkinter.CTkFrame(self,corner_radius=0,width=App.Left_frame_width)
        self.left_frame.grid(column=0,row=0,sticky='nsew')
        
        self.right_frame=customtkinter.CTkFrame(self)
        self.right_frame.grid(column=1,row=0,sticky='nsew',padx=20,pady=20)
        
        #============Working on the Left Frame=============================
        
        #configure grid layout (1x11) 1 column 11 rows
        self.left_frame.grid_rowconfigure(0,minsize=10)   # empty row with minsize as spacing
        self.left_frame.grid_rowconfigure(5,weight=1)
        self.left_frame.grid_rowconfigure(8,minsize=20)
        self.left_frame.grid_rowconfigure(11,minsize=10)
        
        
        #Add Profile Button
        self.profilebutton=customtkinter.CTkButton(self.left_frame,width=App.Left_frame_width,fg_color="gray40",corner_radius=10,text="")
        self.profilebutton.grid(column=0,row=1,pady=10,padx=10,sticky='w')
        
        # Add option Menu to change the Apperance  of the system
        self.optionmenu=customtkinter.CTkOptionMenu(self.left_frame,values=['Light','Dark','System'],width=App.Left_frame_width,command=self.change_apperance_mode)
        self.optionmenu.grid(column=0,row=10,pady=10,sticky='w')
       
       
        #============Working on the Right Frame====================================
       
        # Create two Frames one for the calendar and the other for the to do list Entry
        self.right_frame.grid_columnconfigure((0,1),weight=1)
        self.right_frame.grid_rowconfigure(1,weight=1)
        
        #===========Creating the Frames==============================
        self.task_frame=customtkinter.CTkFrame(self.right_frame,width=250)
        self.task_frame.grid(column=0,row=1,sticky='nsew',padx=20,pady=20)
       
        self.calendar_frame=customtkinter.CTkFrame(self.right_frame,width=250)
        self.calendar_frame.grid(column=1,row=1,sticky='nsew',padx=20,pady=20)
        
        #============Working on the task Frame====================================
        
        # 3 column by 7 rows
        self.task_frame.grid_columnconfigure((0,1,2),weight=1)
        self.task_frame.grid_rowconfigure((0,1,2,3,4,5),weight=1)
        
        # Create a frame for the Entry box, and overlays
        self.Entry_overlay=customtkinter.CTkFrame(self.task_frame,corner_radius=0)
        self.Entry_overlay.grid(column=0,row=7,columnspan=3,sticky='nsew')
        
        # Create a frame for the Entry box, and overlays
        self.commandbox_frame=customtkinter.CTkFrame(self.task_frame,corner_radius=2)
        self.commandbox_frame.grid(column=0,row=2,columnspan=3,rowspan=4,sticky='nsew',pady=10,padx=10)
        
        #---------------Working on Entry_overlay -----------------------------------------
        # 2 columns 2  rows
        self.Entry_overlay.grid_columnconfigure((0,1),weight=1)
        #self.Entry_overlay.grid_rowconfigure((0,1),weight=1)
        
        # Add a three rectangle button
        self.detailsbtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=4,text="",width=30,height=30,image=self.details_icon,command=self.detailbtnclicked)
        self.detailsbtn.grid(column=0,row=0,pady=10,padx=10,sticky='w')
        
        # Add a Calendar button 
        self.calendarbtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=4,text="",width=30,height=30,image= self.calendar_icon,command=self.calendarbtn_clicked)
        self.calendarbtn.grid(column=1,row=0,pady=10,padx=10,sticky='w')
        
        # Add a star button 
        self.starbtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=4,text="",width=30,height=30,image= self.star_icon,command=self.starbtn_clicked)
        self.starbtn.grid(column=2,row=0,pady=10,padx=10,sticky='w')
        
        msg='Enter a task'
        self.task_entry=customtkinter.CTkEntry(self.Entry_overlay,placeholder_text=msg,corner_radius=10,width=30,height=15)
        self.task_entry.grid(column=0,row=1,columnspan=2,sticky='nsew',padx=10)
        
        # Bind the entry box to when someobe clicks enter 
        self.task_entry.bind("<Return>",self.savebtn_clicked)
        
        # Add the Save/Enter Button
        self.savebtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=1,text="",width=30,image=self.enter_icon,command=lambda x=1:self.savebtn_clicked(x))
        self.savebtn.grid(column=2,row=1,pady=10,padx=10,sticky='w')
        
        #--------------------Working on the commandbox_frame----------------------------------------------
        self.commandbox_frame.grid_columnconfigure(0,weight=1)
        self.commandbox_frame.grid_rowconfigure(0,weight=1)
        
        self.scrollable_checkbox_frame = ScrollableCheckBoxFrame(master=self.commandbox_frame, title='Task to do',command=self.checkbox_frame_event,btn_command=self.calendarbtn_clicked)
        self.scrollable_checkbox_frame.grid(row=0, column=0,padx=5, pady=(0,0), sticky="nsew")
        self.scrollable_checkbox_frame.add_item("new item")
        
        # self.commandbox= tk.Listbox(self.commandbox_frame,width=25)
        # self.commandbox.pack(fill='both',expand=1)
        
        #============Working on the Calendar Frame ====================================
        
        # 3 column by 7 rows
        self.calendar_frame.grid_columnconfigure((0,1,2),weight=1)
        self.calendar_frame.grid_rowconfigure((0,1,2,3,4,5),weight=1)
        
        # Create a frame for the Entry box, and overlays
        self.caltophalf_frame=customtkinter.CTkFrame(self.calendar_frame,corner_radius=0)
        self.caltophalf_frame.grid(column=0,row=2,columnspan=3,rowspan=4,sticky='nsew',pady=10,padx=10)
        
        # Create a frame for the Entry box, and overlays
        self.calbothalf_frame=customtkinter.CTkFrame(self.calendar_frame,corner_radius=0)
        self.calbothalf_frame.grid(column=0,row=7,columnspan=3,sticky='nsew')
        
        self.moveButton_frame=customtkinter.CTkFrame(self.calendar_frame,corner_radius=0)
        self.moveButton_frame.grid(column=3,row=1,sticky='e')
        
       
        # Working on Tophalf Frame
        self.tab_view = MyTabview(master=self.caltophalf_frame)
        self.tab_view.pack(fill="both",expand=1,pady=10)
        #self.tab_view.grid(row=0, column=0, padx=20, pady=20)
        
        # Working on MoveButton Frame
        self.moveButton_frame.grid_columnconfigure((0,1,2),weight=1)
        self.moveButton_frame.grid_rowconfigure((0),weight=1)
        
        self.move_left=customtkinter.CTkButton(self.moveButton_frame,border_color="grey",width=20,text="<")
        self.move_left.grid(column=0,row=0,sticky='nsew')
        
        self.move_center=customtkinter.CTkButton(self.moveButton_frame,border_color="grey",width=40,text="Today")
        self.move_center.grid(column=1,row=0,sticky='nsew')
        
        self.move_right=customtkinter.CTkButton(self.moveButton_frame,border_color="grey",width=20,text=">")
        self.move_left.grid(column=2,row=0,sticky='nsew')
    
        
        
    
        
        self.Calendar_btn_clicked()
        
        
        
class ScrollableCheckBoxFrame(customtkinter.CTkScrollableFrame):
    def __init__(self, master,title,command=None,btn_command=None, **kwargs):     
        """ The scrollable frame collects all the input data,stores it and stores the list
        """
        super().__init__(master, **kwargs,label_text=title)
        
        self.grid_columnconfigure(0, weight=1)
        
        self.command = command
        self.btn_command=btn_command
        self.item_frame_list={}
        self.checkbox_list = []
        self.checkbox_done=[]
    
    def add_item(self,item):
        checkbox=customtkinter.CTkCheckBox(self,text=item)
        if self.command is not None:
            checkbox.configure(command=lambda: self.command(item))
        checkbox.grid(row=len(self.checkbox_list), column=0, pady=(0, 10),sticky='w')
        self.checkbox_list.append(checkbox)
    
    def add_item_frame(self,item_name,additional_details=" ",time_date_details=" "):
        ''' Adds a checkbox, label and a button on frame to be addedd to the checkboxFrame'''
        item_frame=customtkinter.CTkFrame(self,height=50)
        item_frame.grid(row=len(self.checkbox_list),column=0,pady=(0,0),sticky='nsew')
        
        #self.item_frame.grid_rowconfigure((0,1,2),weight=1)
        item_frame.grid_columnconfigure(0,weight=1)
        
        # Add the checkbox
        item_checkbox=customtkinter.CTkCheckBox(item_frame,text=item_name)
        if self.command is not None:
            item_checkbox.configure(command=lambda: self.command(item_name))
        item_checkbox.grid(row=0,column=0,pady=(0, 5),sticky='w')
        self.checkbox_list.append(item_checkbox)#append to the checkbox list
        
        #Add the additional detail
        add_details_label=customtkinter.CTkLabel(item_frame,text=additional_details,bg_color='transparent')
        if additional_details is None:
           add_details_label.configure(state='disabled') # make the state of the label 
        add_details_label.grid(row=1,column=0,padx=(30,0),pady=(0, 5),sticky='w')
        
        #Add the button for the date and time
        datetime_btn=customtkinter.CTkButton(item_frame,width=30,bg_color='transparent')
        if time_date_details is None:
            datetime_btn.configure(state='disabled')
        else:
           datetime_btn.configure(command=lambda: self.btn_command(item_name))
        datetime_btn.grid(row=2,column=0,padx=(30,0),pady=(0,5),sticky='w')
        
        self.item_frame_list[f'{item_checkbox.cget("text")}']=item_frame
        
        return
    
    def remove_item(self, item):
        for checkbox in self.checkbox_list:
            if item == checkbox.cget("text"):
                checkbox.destroy()
                self.checkbox_list.remove(checkbox)
                self.checkbox_done.append(checkbox)
                return
    
    
    def remove_item2(self, item):
        for checkbox in self.checkbox_list:
            if item == checkbox.cget("text"):
                if item in self.item_frame_list:
                    item_frame= self.item_frame_list[f'{item}']
                    checkbox.destroy()
                    item_frame.destroy()
                value = self.item_frame_list.pop(f'{checkbox}', None)  # None is the default valu
                self.checkbox_list.remove(checkbox)
                self.checkbox_done.append(checkbox)
                return
    
    def get_checked_items(self):
        checkedboxs=[]
        return [checkbox.cget("text") for checkbox in self.checkbox_list if checkbox.get() == 1]

           
        
class MyTabview(customtkinter.CTkTabview):
    def __init__(self,master,**kwargs):
        super().__init__(master,**kwargs)
        self.create_tabs()
        
    def add_tab(self,tab_name):
        self.add(tab_name)
    
    def create_tabs(self):
        # Add All the possible tabs
        self.add("Day")
        self.add("Week")
        self.add("Month")
        self.add("Year")
        
        # self.tab("Tab 1").grid_columnconfigure(0, weight=1)  # configure grid of individual tabs
        # self.tab("Tab 2").grid_columnconfigure(0, weight=1)
        # self.tab("Tab 3").grid_columnconfigure(0, weight=1)
        
        
        
        
        
       
       
       
       
       
       
       
       
       
       
        
        
        
    


