
#Author: Adeyemo Joel
#Description:  Design a personal todo list app that can not be tracked by  google or even apple and easy to use
 # App inspiration is  gotten from Apple's Calendar, Google Task anad Any.do
#File:Application.py
#Date:8/23/2022

__version__='1.1.0'

#Front_end Dependencies
import calendar
from tkinter import END, INSERT, PhotoImage
import customtkinter
from PIL import  Image,ImageTk
import PIL.Image
import tkinter as tk
import queue,datetime
from tkinter import messagebox

#Back-end Dependencies
import os
from typing import Optional, Tuple
import re
import pandas as pd
from icecream import ic
import json


PATH = os.path.dirname(os.path.realpath(__file__))
image_path= os.path.join(PATH,"Icons")

class App(customtkinter.CTk):
    HEIGHT= 900
    WIDTH= 1200
    Left_frame_width=50
    def __init__(self, *args, fg_color="default_theme", **kwargs):
        super().__init__() 
        
        # Customize the Layout
        self.title("To do List App")
        self.geometry(f'{App.WIDTH}x{App.HEIGHT}')
        self.protocol("WM_DELETE_WINDOW",self.on_closing)
        
        # Load images
        self.enter_icon= self.load_image(light_path=image_path+'/Send-30.png',image_size=(30,30))                  # [1] in links.txt
        self.calendar_icon=self.load_image(light_path=image_path+"/calendar-30.png",image_size=(30,30))            # [2] in links.txt
        self.details_icon=self.load_image(light_path=image_path+"/details-30.png",image_size=(30,30))              # [3] in links.txt
        self.star_icon=self.load_image(light_path=image_path+"/star-30.png",image_size=(30,30))                    # [4] in links.txt
        
        # Making sure that the toplevel window isnt duplicated
        self.toplevel_window=None
        self.tasks=[]
                            
        # Create a queue
        self.que=queue.Queue()
        
        #Design the App GUI 
        self.create_app()
    #-------------------------------------------------------------------------
    def on_closing(self,events=0):
        '''When the Window is closed'''
        print("destroyed")
        self.destroy()
    #----------------------------------------------------------------------------
    def change_apperance_mode(self,selected):
        ''' # Change the apperance of the  App ie either Dark mode or light mode'''
        customtkinter.set_appearance_mode(selected)
    #-----------------------------------------------------------------------------
    def load_image(self,light_path:Optional[str] = None,dark_path:Optional[str] = None, image_size: Tuple[int, int]=(0,0)):
        light_image = Image.open(light_path) if light_path else None
        dark_image = Image.open(dark_path) if dark_path else None
        return customtkinter.CTkImage(light_image=light_image,dark_image=dark_image,size=image_size)
    #----------------------------------------------------------------------------
    def add_to_commandbox(self):
        ''' # Add what Ever is in the queue to the command box'''
        inside= []            # List that holds the current values
        lz_que=queue.Queue()   # Create a new Queue
        
        # Put the current task into a new queue
        for i_x in self.que.queue:
            lz_que.put(i_x)
        
        #Print the Queue  on the Combo box
        for i_y in range(0,len(lz_que.queue)):
            inside.append(lz_que.get()) 
                                
        self.commandbox.delete("0",END)                                                                                                                                                                                                                                                                
        #Add to the Command box
        for x in range(0,len(inside)):
            instr=f'{x}:{inside[x]}'+'\n'
            self.commandbox.insert(x,instr)
            #self.commandbox.tag_add("here","1.0",END)
        return
    #--------------------------------------------------------------------------------------    
    def savebtn_clicked(self,choice):
        
        # Get the various elements such as Name, additional details and 
        text_entered=self.task_entry.get() 
        detail_text_entered=self.adddetails_entry.get()
        self.date_time_entered_rl=''
        if self.toplevel_window !=None:
            datetime_entered =self.toplevel_window.donebtn_clicked(text_entered)
            self.date_time_entered_rl= datetime_entered['current_date']+','+datetime_entered['current_time']
        
        self.adddetails_entry.grid_remove() # Close the box
        self.scrollable_checkbox_frame.add_item_frame(text_entered,additional_details=detail_text_entered, time_date_details=self.date_time_entered_rl)
        self.add_task_lst(text_entered,detail_text_entered,self.date_time_entered_rl)
        self.task_entry.delete("0",'end')
        self.adddetails_entry.delete(0,END)
    #---------------------------------------------------------------------------------------- 
    def add_task_lst(self,task_name,more_details,datetime_reminder):
        ''' Function at the task with its reminder,date, and any other to a list'''
        task={
            'task_name': f'{task_name}',
            'Extra Details': f'{more_details}',
            'Date/time':f'{datetime_reminder}'
        }
        self.tasks.append(task)
        self.save_and_exist()
    #---------------------------------------------------------------------------------------- 
    def save_and_exist(self):
        with open(PATH+'/files/saved_entry.json', 'w') as file:
            json.dump(self.tasks, file, indent=4)
    #---------------------------------------------------------------------------------------- 
    def detailbtnclicked(self):
        ''' Add more details to the current task'''
        self.adddetails_entry.grid()  #Unlock the entry box grid
        self.adddetails_entry.bind("<Return>",self.savebtn_clicked)
    #---------------------------------------------------------------------------------------- 
    def detailbtnentered(self):
        detail_text_entered=self.adddetails_entry.get()
        self.adddetails_entry.grid_remove() # Close the box
        self.adddetails_entry.delete(0,END)
    #----------------------------------------------------------------------------------------     
    def calendarbtn_clicked(self):
        if self.toplevel_window is None or not self.toplevel_window.winfo_exists():
            self.toplevel_window= CalendarFrame(self) #Create the calendar frame  #create window if its None or destroyed
        else:
            self.toplevel_window.focus()
    #----------------------------------------------------------------------------------------  
    def starbtn_clicked(self):
        pass
    #----------------------------------------------------------------------------------------    
    def create_toplevel(self):
        #Create the Frame
        self.superframe=customtkinter.CTkFrame(self.new_root,corner_radius=0)
        self.superframe.grid(column=0,row=0,sticky='nsew')
        
        # Configure the frame
        #configure grid layout (1x11) 1 column 11 rows
        self.superframe.grid_rowconfigure(0,minsize=10)   # empty row with minsize as spacing
        self.superframe.grid_rowconfigure(5,weight=1)
        self.superframe.grid_rowconfigure(8,minsize=20)
        self.superframe.grid_rowconfigure(11,minsize=10)
        
        # self.trainglebtn=customtkinter.CTkButton(self.superframe,fg_color="gray40",corner_radius=10,text="",width=20,image=self.threedot_icon)
        # self.trainglebtn.grid(column=0,row=0,pady=10,padx=10,sticky='w')
        
        # # Add a Calendar button 
        # self.calendarbtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=10,text="",width=40,image= self.calendar_icon,command=self.calendarbtn_clicked)
        # self.calendarbtn.grid(column=1,row=0,pady=10,padx=10,sticky='w')
    #----------------------------------------------------------------------------------------  
    def Calendar_btn_clicked(self):
        datetime=calendar.calendar(2022)
        print(datetime)
    #----------------------------------------------------------------------------------------     
    def checkbox_frame_event(self,choice):
        print(f"checkbox frame modified: {self.scrollable_checkbox_frame.get_checked_items()}")
        self.scrollable_checkbox_frame.remove_item2(choice)
    #-----------------------------------------------------------------------------------------   
    def create_app(self):
        #Implement Two frame system
        # Configure grid layout [2x1] ie 2 columns [0,1] and  1 row[0]
        self.grid_columnconfigure(1,weight=1)
        self.grid_rowconfigure(0,weight=1)
        
        #===========Creating the Two Frames==============================
        self.left_frame=customtkinter.CTkFrame(self,corner_radius=0,width=App.Left_frame_width)
        self.left_frame.grid(column=0,row=0,sticky='nsew')
        
        self.right_frame=customtkinter.CTkFrame(self)
        self.right_frame.grid(column=1,row=0,sticky='nsew',padx=20,pady=20)
        
        #============Working on the Left Frame=============================
        
        #configure grid layout (1x11) 1 column 11 rows
        self.left_frame.grid_rowconfigure(0,minsize=10)   # empty row with minsize as spacing
        self.left_frame.grid_rowconfigure(5,weight=1)
        self.left_frame.grid_rowconfigure(8,minsize=20)
        self.left_frame.grid_rowconfigure(11,minsize=10)
        
        
        #Add Profile Button
        self.profilebutton=customtkinter.CTkButton(self.left_frame,width=App.Left_frame_width,fg_color="gray40",corner_radius=10,text="")
        self.profilebutton.grid(column=0,row=1,pady=10,padx=10,sticky='w')
        
        # Add option Menu to change the Apperance  of the system
        self.optionmenu=customtkinter.CTkOptionMenu(self.left_frame,values=['Light','Dark','System'],width=App.Left_frame_width,command=self.change_apperance_mode)
        self.optionmenu.grid(column=0,row=10,pady=10,sticky='w')
       
       
        #============Working on the Right Frame====================================
       
        # Create two Frames one for the calendar and the other for the to do list Entry
        self.right_frame.grid_columnconfigure((0,1),weight=1)
        self.right_frame.grid_rowconfigure(1,weight=1)
        
        #===========Creating the Frames==============================
        self.task_frame=customtkinter.CTkFrame(self.right_frame,width=250)
        self.task_frame.grid(column=0,row=1,sticky='nsew',padx=20,pady=20)
       
        self.calendar_frame=customtkinter.CTkFrame(self.right_frame,width=250)
        self.calendar_frame.grid(column=1,row=1,sticky='nsew',padx=20,pady=20)
        
        #============Working on the task Frame====================================
        
        # 3 column by 7 rows
        self.task_frame.grid_columnconfigure((0,1,2),weight=1)
        self.task_frame.grid_rowconfigure((0,1,2,3,4,5),weight=1)
        
        # Create a frame for the Entry box, and overlays
        self.Entry_overlay=customtkinter.CTkFrame(self.task_frame,corner_radius=0)
        self.Entry_overlay.grid(column=0,row=7,columnspan=3,sticky='nsew')
        
        # Create a frame for the Entry box, and overlays
        self.commandbox_frame=customtkinter.CTkFrame(self.task_frame,corner_radius=2)
        self.commandbox_frame.grid(column=0,row=2,columnspan=3,rowspan=4,sticky='nsew',pady=10,padx=10)
        
        #---------------Working on Entry_overlay -----------------------------------------
        # 2 columns 2  rows
        self.Entry_overlay.grid_columnconfigure((0,1),weight=1)
        #self.Entry_overlay.grid_rowconfigure((0,1),weight=1)
        
        # Add a three rectangle button
        self.detailsbtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=4,text="",width=30,height=30,image=self.details_icon,command=self.detailbtnclicked)
        self.detailsbtn.grid(column=0,row=0,pady=10,padx=10,sticky='w')
        
        # Add a Calendar button 
        self.calendarbtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=4,text="",width=30,height=30,image= self.calendar_icon,command=self.calendarbtn_clicked)
        self.calendarbtn.grid(column=1,row=0,pady=10,padx=10,sticky='w')
        
        # Add a star button 
        self.starbtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=4,text="",width=30,height=30,image= self.star_icon,command=self.starbtn_clicked)
        self.starbtn.grid(column=2,row=0,pady=10,padx=10,sticky='w')
        
        msg='Enter a task'
        self.task_entry=customtkinter.CTkEntry(self.Entry_overlay,placeholder_text=msg,corner_radius=10,width=30,height=15)
        self.task_entry.grid(column=0,row=1,columnspan=2,sticky='nsew',padx=10)
        
        # Bind the entry box to when someone clicks enter 
        self.task_entry.bind("<Return>",self.savebtn_clicked)
        
        self.adddetails_entry=customtkinter.CTkEntry(self.Entry_overlay,placeholder_text='Enter additional details',corner_radius=10,width=30,height=15)
        self.adddetails_entry.grid(column=0,row=2,columnspan=2,sticky='nsew',padx=10)
        self.adddetails_entry.grid_remove()
        
        # Add the Save/Enter Button
        self.savebtn=customtkinter.CTkButton(self.Entry_overlay,fg_color="gray40",corner_radius=1,text="",width=30,image=self.enter_icon,command=lambda x=1:self.savebtn_clicked(x))
        self.savebtn.grid(column=2,row=1,pady=10,padx=10,sticky='w')
        
        #--------------------Working on the commandbox_frame----------------------------------------------
        self.commandbox_frame.grid_columnconfigure(0,weight=1)
        self.commandbox_frame.grid_rowconfigure(0,weight=1)
        
        self.scrollable_checkbox_frame = ScrollableCheckBoxFrame(master=self.commandbox_frame, title='Task to do',command=self.checkbox_frame_event,btn_command=self.calendarbtn_clicked)
        self.scrollable_checkbox_frame.grid(row=0, column=0,padx=5, pady=(0,0), sticky="nsew")
        self.scrollable_checkbox_frame.add_item_frame("new item")
        
        # self.commandbox= tk.Listbox(self.commandbox_frame,width=25)
        # self.commandbox.pack(fill='both',expand=1)
        
        #============Working on the Calendar Frame ====================================
        
        # 3 column by 7 rows
        self.calendar_frame.grid_columnconfigure((0,1,2),weight=1)
        self.calendar_frame.grid_rowconfigure((0,1,2,3,4,5),weight=1)   
        
        # Create a frame for the Entry box, and overlays
        self.caltophalf_frame=customtkinter.CTkFrame(self.calendar_frame,corner_radius=0)
        self.caltophalf_frame.grid(column=0,row=2,columnspan=3,rowspan=4,sticky='nsew',pady=10,padx=10)
        
        # Create a frame for the Entry box, and overlays
        self.calbothalf_frame=customtkinter.CTkFrame(self.calendar_frame,corner_radius=0)
        self.calbothalf_frame.grid(column=0,row=7,columnspan=3,sticky='nsew')
        
        self.moveButton_frame=customtkinter.CTkFrame(self.calendar_frame,corner_radius=0)
        self.moveButton_frame.grid(column=3,row=1,sticky='e')
        
       
        # Working on Tophalf Frame
        self.tab_view = MyTabview(master=self.caltophalf_frame)
        self.tab_view.pack(fill="both",expand=1,pady=10)
        #self.tab_view.grid(row=0, column=0, padx=20, pady=20)
        
        # Working on MoveButton Frame
        self.moveButton_frame.grid_columnconfigure((0,1,2),weight=1)
        self.moveButton_frame.grid_rowconfigure((0),weight=1)
        
        self.move_left=customtkinter.CTkButton(self.moveButton_frame,border_color="grey",width=20,text="<")
        self.move_left.grid(column=0,row=0,sticky='nsew')
        
        self.move_center=customtkinter.CTkButton(self.moveButton_frame,border_color="grey",width=40,text="Today")
        self.move_center.grid(column=1,row=0,sticky='nsew')
        
        self.move_right=customtkinter.CTkButton(self.moveButton_frame,border_color="grey",width=20,text=">")
        self.move_left.grid(column=2,row=0,sticky='nsew')
    
    
        
        self.Calendar_btn_clicked()
        
        
class ScrollableCheckBoxFrame(customtkinter.CTkScrollableFrame):
    def __init__(self, master,title,command=None,btn_command=None, **kwargs):     
        """ The scrollable frame collects all the input data,stores it and stores the list
        """
        super().__init__(master, **kwargs,label_text=title)
        
        self.grid_columnconfigure(0, weight=1)
        
        self.command = command
        self.btn_command=btn_command
        self.item_frame_list={}
        self.checkbox_list = []
        self.checkbox_done=[]
    
    def add_item(self,item):
        checkbox=customtkinter.CTkCheckBox(self,text=item)
        if self.command is not None:
            checkbox.configure(command=lambda: self.command(item))
        checkbox.grid(row=len(self.checkbox_list), column=0, pady=(0, 10),sticky='w')
        self.checkbox_list.append(checkbox)
    
    def add_item_frame(self,item_name,additional_details=" ",time_date_details=" "):
        ''' Adds a checkbox, label and a button on frame to be addedd to the checkboxFrame'''
        item_frame=customtkinter.CTkFrame(self,height=50)
        item_frame.grid(row=len(self.checkbox_list),column=0,pady=(0,0),sticky='nsew')
        
        #self.item_frame.grid_rowconfigure((0,1,2),weight=1)
        item_frame.grid_columnconfigure(0,weight=1)
        
        # Add the checkbox
        item_checkbox=customtkinter.CTkCheckBox(item_frame,text=item_name)
        if self.command is not None:
            item_checkbox.configure(command=lambda: self.command(item_name))
        item_checkbox.grid(row=0,column=0,pady=(0, 5),sticky='w')
        self.checkbox_list.append(item_checkbox)#append to the checkbox list
        
        #Add the additional detail
        add_details_label=customtkinter.CTkLabel(item_frame,text=additional_details,bg_color='transparent')
        if additional_details is None:
           add_details_label.configure(state='disabled') # make the state of the label 
        add_details_label.grid(row=1,column=0,padx=(30,0),pady=(0, 5),sticky='w')
        
        #Add the button for the date and time
        datetime_btn=customtkinter.CTkButton(item_frame,width=30,bg_color='transparent',text= "Add date/time",fg_color="transparent")
        if time_date_details =='':
            datetime_btn.configure(state='disabled')
        else:
           datetime_btn.configure(command=lambda: self.btn_command(item_name),text=f'{time_date_details}')
        datetime_btn.grid(row=2,column=0,padx=(30,0),pady=(0,5),sticky='w')
        
        self.item_frame_list[f'{item_checkbox.cget("text")}']=item_frame
        
        return
    
    def remove_item(self, item):
        for checkbox in self.checkbox_list:
            if item == checkbox.cget("text"):
                checkbox.destroy()
                self.checkbox_list.remove(checkbox)
                self.checkbox_done.append(checkbox)
                return
    
    def remove_item2(self, item):
        for checkbox in self.checkbox_list:
            if item == checkbox.cget("text"):
                if item in self.item_frame_list:
                    item_frame= self.item_frame_list[f'{item}']
                    checkbox.destroy()
                    item_frame.destroy()
                value = self.item_frame_list.pop(f'{checkbox}', None)  # None is the default valu
                self.checkbox_list.remove(checkbox)
                self.checkbox_done.append(checkbox)
                return
    
    def get_checked_items(self):
        checkedboxs=[]
        return [checkbox.cget("text") for checkbox in self.checkbox_list if checkbox.get() == 1]

                
class MyTabview(customtkinter.CTkTabview):
    def __init__(self,master,**kwargs):
        super().__init__(master,**kwargs)
        self.create_tabs()
        
    def add_tab(self,tab_name):
        self.add(tab_name)
    
    def create_tabs(self):
        # Add All the possible tabs
        self.add("Day")
        self.add("Week")
        self.add("Month")
        self.add("Year")
        
        # self.tab("Tab 1").grid_columnconfigure(0, weight=1)  # configure grid of individual tabs
        # self.tab("Tab 2").grid_columnconfigure(0, weight=1)
        # self.tab("Tab 3").grid_columnconfigure(0, weight=1)
        
        
class CalendarFrame(customtkinter.CTkToplevel):
    '''  The idea for the calendar frame is the  ability to do the following
        - Set time using entry box
        - 
    '''
    WIDTH=300
    HEIGHT=500
    def __init__(self,master,*args, **kwarg):
        super().__init__(master,*args, **kwarg)
        
        self.title("Set Date and Time")
        self.geometry(f'{CalendarFrame.WIDTH}x{CalendarFrame.HEIGHT}')
        self.protocol("WM_DELETE_WINDOW",self.on_closing)
        
        
        self.month_names = {
            1: "Jan",2: "Feb",3: "Mar",
            4: "Apr",5: "May",6: "Jun",
            7: "Jul",8: "Aug",9: "Sep",
            10: "Oct",11: "Nov",12: "Dec"
        }
        
        self.df= pd.DataFrame()
        self.remind_icon= self.load_image(light_path=image_path+'/remind-15.png',image_size=(15,15))
        current_date= datetime.datetime.now()
        self.curr_day=   current_date.day
        self.curr_month= current_date.month
        self.curr_year=  current_date.year
        self.curr_month_formatted= self.month_names.get(self.curr_month,"invalid")
        self.clicked_date= f'{self.curr_month_formatted} {self.curr_day}, {self.curr_year}'  # The space is very important to the format
        self.curr_time='12 AM'
        self.End_date=''
        self.End_time=''
        self.Reminder=''
        
        # For the buttons
        self.btns=[]
        self.btn_rows=[]  # Each row has an array of cols 
        self.used_btn=[]
    
        #using icecream to print
        ic(type(self.curr_month))
        ic(type(self.curr_year))
        ic(self.curr_month_formatted)
        ic(current_date)
         
        
        self.create_win_elements()
    
    def on_closing(self):
        self.destroy()
    
    def load_image(self,light_path:Optional[str] = None,dark_path:Optional[str] = None, image_size: Tuple[int, int]=(0,0)):
        light_image = Image.open(light_path) if light_path else None
        dark_image = Image.open(dark_path) if dark_path else None
        return customtkinter.CTkImage(light_image=light_image,dark_image=dark_image,size=image_size)

    def create_win_elements(self):
        '''  Idea:
           - Have entry box at the top
           - Have the calendar monthly view down
           - toggle button for end date and timee
           - clear btn
           - Remind drop down menu
        '''
        
        # self.superframe=customtkinter.CTkFrame(self,corner_radius=0)
        # self.superframe.grid(column=0,row=0,sticky='nsew')
        
        # # Configure the frame
        # #configure grid layout (1x11) 1 column 11 rows
        # self.superframe.grid_columnconfigure(0,weight=1)
        # self.superframe.grid_rowconfigure(0,minsize=10)   # empty row with minsize as spacing
        # #self.superframe.grid_rowconfigure(5,weight=1)
        # #self.superframe.grid_rowconfigure(8,minsize=20)
        # #self.superframe.grid_rowconfigure(11,minsize=10)
        
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1) 
    
        #------------------------Date Change  Frame----------------------------
        self.entrybox_frame=customtkinter.CTkFrame(self)  # to make transparent
        self.entrybox_frame.grid(column=0,row=1,padx=(20,20),pady=(10,10),sticky='ew')
        
        
        self.Date_entry= customtkinter.CTkEntry(self.entrybox_frame,corner_radius=4,width=CalendarFrame.WIDTH/2)
        self.Date_entry.grid(column=0,row=0,padx=(10,0))
        self.time_entry= customtkinter.CTkEntry(self.entrybox_frame,corner_radius=4,width=CalendarFrame.WIDTH/3)
        self.time_entry.grid(column=1,row=0,padx=(0,10))
        self.enddate_entry= customtkinter.CTkEntry(self.entrybox_frame,corner_radius=4,width=CalendarFrame.WIDTH/3)
        self.enddate_entry.grid(column=1,row=0,padx=(15,10))
        self.enddate_entry.grid_remove()
        
        
        self.Date_entry2= customtkinter.CTkEntry(self.entrybox_frame,corner_radius=4,width=CalendarFrame.WIDTH/2)
        self.Date_entry2.grid(column=0,row=1,padx=(10,0),pady=(5,0))
        self.time_entry2= customtkinter.CTkEntry(self.entrybox_frame,corner_radius=4,width=CalendarFrame.WIDTH/3)
        self.time_entry2.grid(column=1,row=1,padx=(0,10),pady=(5,0))
        
        self.Date_entry2.grid_remove()
        self.time_entry2.grid_remove()
        
        
        self.status_label = customtkinter.CTkLabel(self.entrybox_frame, text="", fg_color="green")
        self.status_label.grid(column=2, row=0, sticky='w')
        
        self.Date_entry.bind("<Return>",self.Date_entry_clicked)
        self.time_entry.bind("<Return>",self.Time_entry_clicked)
        # self.Date_entry.set_status_label()
        
        #------------------------Calendar Frame----------------------------
        self.calable_frame=customtkinter.CTkFrame(self,height=27)  # to make transparent
        self.calable_frame.grid(column=0,row=2,padx=(20,20),pady=(10,10),sticky='ew')
        
        self.calable_frame.grid_columnconfigure((1,2),weight=0)
        self.calable_frame.grid_columnconfigure(0,weight=1)
        
        self.month_label=customtkinter.CTkLabel(self.calable_frame,text="Jan 2077")
        self.month_label.grid(column=0,row=0, padx=20, sticky="w")
        
        self.left_button = customtkinter.CTkButton(self.calable_frame, text="<", width=26, height=26,hover_color="grey70",bg_color="transparent",command=self.leftbtn_clicked)
        self.left_button.grid(column=1,row=0, padx=(3, 0),sticky='w')
        self.right_button = customtkinter.CTkButton(self.calable_frame, text=">", width=26, height=26,hover_color="grey70",bg_color="transparent",command=self.rightbtn_clicked)
        self.right_button.grid(column=2,row=0, padx=(3, 0),sticky='w')
        
        #------------------------Calendar Table  Frame----------------------------
        self.calendartable_frame=customtkinter.CTkFrame(self)  # to make transparent
        self.calendartable_frame.grid(column=0,row=3,rowspan=3,padx=(20,20),pady=(10,10),sticky='ew')
        
        # create the table based on the current year and month
        self.create_calendar_btns(self.curr_year,self.curr_month)
        
        #------------------------Remind Frame----------------------------
        self.remind_frame=customtkinter.CTkFrame(self,height=27)  # to make transparent
        self.remind_frame.grid(column=0,row=6,padx=(20,20),pady=(10,10),sticky='ew')
        
        self.remind_frame.grid_columnconfigure((0,1),weight=0)
        self.remind_frame.grid_columnconfigure(2,weight=1)
        
        self.remindicon_label=customtkinter.CTkLabel(self.remind_frame,text='',bg_color='transparent',width=15,height=15,image=self.remind_icon)
        self.remindicon_label.grid(column=0,row=0, padx=(0,10), sticky="w")
        self.remind_label=customtkinter.CTkLabel(self.remind_frame,text="Remind")
        self.remind_label.grid(column=1,row=0, padx=(0,10), sticky="w")
        
        options=['None','1 day before(9am)','2 day before(9am)','1 week before(9am)']
        self.optionmenu=customtkinter.CTkOptionMenu(self.remind_frame,values=options, width=CalendarFrame.WIDTH/8,bg_color='transparent')
        self.optionmenu.grid(column=3,row=0,pady=10,sticky='e')
        
        
        #------------------------Enddate  time  Frame----------------------------
        self.endatetime_frame=customtkinter.CTkFrame(self,height=27)  # to make transparent
        self.endatetime_frame.grid(column=0,row=7,padx=(20,20),pady=(10,10),sticky='ew')
        
        self.endatetime_frame.grid_columnconfigure(0,weight=0)
        self.endatetime_frame.grid_columnconfigure((1,2),weight=1)
        self.endatetime_frame.grid_rowconfigure((0,1),weight=1)
        
        self.enddate_label=customtkinter.CTkLabel(self.endatetime_frame,text="End date")
        self.enddate_label.grid(column=0,row=0, padx=(0,10), sticky="w")
        
        switch_var = customtkinter.StringVar(value='off')
        self.enddate_switch= customtkinter.CTkSwitch(self.endatetime_frame,variable=switch_var,onvalue='on',offvalue='off',text="",width=2,command=self.enddate_switch_event)
        self.enddate_switch.grid(column=3,row=0, padx=(0,10), sticky="e")
        self.enddate_switch_event()
        
        self.includetime_label=customtkinter.CTkLabel(self.endatetime_frame,text="Include time")
        self.includetime_label.grid(column=0,row=1, padx=(0,10), sticky="w")
        
        switch_var2= customtkinter.StringVar(value='off')
        self.time_switch= customtkinter.CTkSwitch(self.endatetime_frame,variable=switch_var2,onvalue='on',offvalue='off',text="",width=2,command=self.time_switch_event)
        self.time_switch.grid(column=3,row=1, padx=(0,10), sticky="e")
        self.time_switch_event()
        
        #------------------------Clear Frame----------------------------
        self.clear_frame=customtkinter.CTkFrame(self,height=27)  # to make transparent
        self.clear_frame.grid(column=0,row=8,padx=(20,20),pady=(10,10),sticky='ew')
        
        self.clear_frame.grid_columnconfigure((0,1),weight=0)
        self.clear_frame.grid_columnconfigure((2,3),weight=1)
        self.clear_frame.grid_rowconfigure(0,weight=1)
        
        self.cancel_btn=customtkinter.CTkButton(self.clear_frame,text="Cancel",bg_color="transparent")
        self.cancel_btn.grid(column=2,row=0, padx=(0,10), sticky="w")
        
        self.done_btn=customtkinter.CTkButton(self.clear_frame,text="Done",bg_color="transparent",command=self.donebtn_clicked)
        self.done_btn.grid(column=3,row=0, padx=(0,10), sticky="w")
    
    def Date_entry_clicked(self,choice):
        ''' It is very space sensitive so becareful when entrying the value'''
        self.on_validate_date_format(self.Date_entry.get())    #validate the string
        results=self.get_match_elements(self.Date_entry.get()) #get the elements ie month and Year
        
        # plot the calendar table 
        print(type(results["Year"]),results["Month"])
        self.create_calendar_btns(int(results["Year"]),int(results["Month"]))
    
    def Time_entry_clicked(self,choice):
        ic('Time enter clicked ')
        ic(self.time_entry.get())
        valid =self.on_validate_time_format(self.time_entry.get()) # validate the string entered
        if valid:
            ic('pass')#Add to database for the particular day
            self.curr_time=self.time_entry.get()
        else:
            ic('failed')
            pass
    
    def time_switch_event(self):
        if(self.time_switch.get()=='off'):
            self.time_entry.delete(0,END)   # clear the data in the entry box
            self.time_entry.configure(state='disabled') #disable the time entry box
            self.Date_entry2.grid_remove()
            self.time_entry2.grid_remove()
        else:
            if(self.enddate_switch.get()=='on'):  #If both time and end date is on
                self.Date_entry2.grid()
                self.time_entry2.grid()
                self.time_entry2.delete(0,END)     # clear the data in the entry box
                self.time_entry2.insert(0,"12 AM") # print the 12am in the entry box
                self.Date_entry2.delete(0,END)   # Clear the data in the box
                self.Date_entry2.insert(0, f'{self.curr_month_formatted} {self.curr_day}, {self.curr_year}')
            else:
                self.time_entry.configure(state='normal')   #enable the time entry box
                self.time_entry.delete(0,END)     # clear the data in the entry box
                self.time_entry.insert(0,"12 AM") # print the 12am in the entry box
    
    def enddate_switch_event(self):
        ''' This callback function occurs when the end date switch is turned on
        First it creates a different entry box, if off disable and make the box dissappers, and add to end date list'''
        
        # self.enddate_entry= customtkinter.CTkEntry(self.entrybox_frame,corner_radius=4,width=CalendarFrame.WIDTH/4)
        # self.enddate_entry.grid(column=1,row=0,padx=(15,10))
        
        if(self.enddate_switch.get()=='off'):
            self.enddate_entry.grid_remove()
            self.Date_entry2.grid_remove()
            self.time_entry2.grid_remove()
            self.enddate_entry.delete(0,END)   # clear the data in the entry box
            self.enddate_entry.configure(state='disabled')  #disable the enddate entry box
            
        else:
            self.enddate_entry.grid()
            self.enddate_entry.configure(state='normal')   #enable the time entry box
            self.enddate_entry.delete(0,END)   # Clear the data in the box
            self.enddate_entry.insert(0, f'{self.curr_month_formatted} {self.curr_day}, {self.curr_year}')
            #self.enddate_entry.grid(column=1,row=0,padx=(15,10))
                    
    def get_match_elements(self,input_text):
        date_pattern= r'^(?P<month>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (?P<day>\d{1,2}), (?P<year>\d{4})$'
        match=re.match(date_pattern,str(input_text))
        month_map={"Jan":1,"Feb":2,
                   "Mar":3,"Apr":4,
                   "May":5,"Jun":6,
                   "Jul":7,"Aug":8,
                   "Sep":9,"Oct":10,
                   "Nov":11,"Dec":12}
        res={ 'Month': f'{month_map[match.group("month")]}',
               'Day' : f'{match.group("day")}',
               'Year':f'{match.group("year")}'
        }
        return res
    
    def validate_date_format(self,input_text):
        date_pattern= r'^\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{1,2}), (\d{4})$'
        print(input_text)
        return bool(re.match(date_pattern,str(input_text)))
    
    def on_validate_date_format(self, new_text):
        if self.validate_date_format(new_text):
            if self.status_label:
                self.status_label.configure(text="Valid date format", fg_color="green")
            return True
        else:
            if self.status_label:
                self.status_label.configure(text="Invalid date format", fg_color="red")
                self.Date_entry.configure(placeholder_text='Not right format Jan 4, 2077',fg_color='red')
            return False   
    
    def validate_time_format(self,input_time):
        time_pattern=r"^(\d{1,2}(:\d{2})?)(\s?)([apAp][mM])$"
        return bool(re.match(time_pattern,str(input_time)))
    
    def on_validate_time_format(self,new_txt):
        if self.validate_time_format(new_txt):
            if self.status_label:
                self.status_label.configure(text="Valid date format", fg_color="green")
            return True
        else:
            if self.status_label:
                self.status_label.configure(text="Invalid date format", fg_color="red")
                self.Date_entry.configure(placeholder_text='Can be 12am or 12 am or 12:30 am',fg_color='red')
            return False      
    
    def leftbtn_clicked(self):
        '''Moves the calendar backwards to the next month'''
        self.curr_month= self.curr_month-1
        if self.curr_month != 0:  #if when haven't reached december
            self.create_calendar_btns(self.curr_year,self.curr_month)    #move  backwards
        else:
            self.curr_year= self.curr_year-1
            self.curr_month=12
            self.create_calendar_btns(self.curr_year,self.curr_month)   #change the year
    
    def rightbtn_clicked(self):
        '''Moves the calendar forward to the next month'''
        self.curr_month = self.curr_month+1
        if self.curr_month !=13:  #if when haven't reached december
            ic(self.curr_month)
            ic(self.curr_year)
            self.create_calendar_btns(self.curr_year,self.curr_month)    #move forward
        else:
            self.curr_year= self.curr_year+1
            self.curr_month=1
            self.create_calendar_btns(self.curr_year,self.curr_month)   #change the year
    
    def change_year_month_label(self,year,month):
        #change the Label on the next row
        self.curr_year,self.curr_month=year,month
        self.curr_month_formatted= self.month_names[self.curr_month]
        self.month_label.configure(text=f'{self.curr_month_formatted} {self.curr_year}')    #change the Label on the next row
        return 
        
    def create_calendar_btns(self,year,month):
        self.change_year_month_label(year,month)  #Format the Label on the next row
        cal=calendar.monthcalendar(year, month)
        n_rows=len(cal)
        n_cols=len(cal[0])
        #btns=[]
        self.btns.clear()
        
        for row in range(n_rows):
            btn_rows=[]  # Each row has an array of cols 
            for col in range(n_cols):
                day=cal[row][col]
                if day==0:
                    label=''
                else:
                    label= str(day)
                button =customtkinter.CTkButton(self.calendartable_frame,text=label,width=15,fg_color="transparent",hover_color="blue",command=lambda txt=label,row= row,col=col: self.day_btn_clicked(txt,row,col))
                btn_rows.append(button)
                button.grid(column=col,row=row,padx=2,pady=2)
            self.btns.append(btn_rows) 
    
    def day_btn_clicked(self,day:str,row,col):
        # Get the date, year and month and print on the
        if self.used_btn:
           self.used_btn[-1].configure(fg_color='transparent') # if available
        ic(day)
        ic(row,col)
        self.btns[row][col].configure(fg_color='blue')
        self.used_btn.append(self.btns[row][col])
        
        #Add the date - month and Year together
        self.curr_day= day
        self.clicked_date= f'{self.curr_month_formatted} {self.curr_day}, {self.curr_year}'
        self.Date_entry.delete(0,END)
        self.Date_entry.insert(0,f'{self.clicked_date}')
    
    def donebtn_clicked(self,Task_name:Optional[str] = None):
        ''' The task name is entered from the other class to help when saving'''
        ic('Done btn Clicked')
        self.destroy()
        data={
            "Task_name":f'{Task_name}',
            "current_date":f'{self.clicked_date}',
            "current_day":f'{self.curr_day}',
            "current_month":f'{self.curr_month}',
            "current_year":f'{self.curr_year}',
            "current_time":f'{self.curr_time}',
            "End_date": f'{self.End_date}',
            "End_time":f'{self.End_time}',
            "Reminder":f'{self.Reminder}'
        }
        #self.df.append(data)
        return data
       
       
       
       
       
       
       
        
        
        
    


